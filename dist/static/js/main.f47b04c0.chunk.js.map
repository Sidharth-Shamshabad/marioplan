{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","components/projects/CreateProject.js","store/actions/projectActions.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","profile","initials","SignedOutLinks","state","firebase","links","uid","Notifications","notifications","map","item","key","id","user","content","moment","time","toDate","fromNow","ProjectSummary","project","title","authorFirstName","authorLastName","createdAt","toString","calendar","ProjectList","projects","Dashboard","this","Component","compose","firestoreConnect","collection","orderBy","limit","firestore","ordered","ownProps","match","params","data","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","resp","doc","set","CreateProject","createProject","history","push","database","authorId","add","Date","App","exact","path","component","ProjectDetails","Boolean","window","location","hostname","initState","authReducer","action","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","settings","timestampsInSnapshots","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","rrfProps","config","userProfile","useFirestoreForProfile","enableRedirectHandling","resetBeforeLogin","createFirestoreInstance","AuthIsLoaded","children","useSelector","isLoaded","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.f47b04c0.chunk.js","sourcesContent":["import React, { Profiler } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { signOut } from '../../store/actions/authActions';\n\nconst SignedInLinks = (props) => {\n    return (\n        <ul className=\"right\">\n            <li><NavLink to=\"/create\">New Project</NavLink></li>\n            <li><a onClick={props.signOut}>Log Out</a></li>\n            <li><NavLink to=\"/\" className=\"btn btn-floating pink lighten-1\">{props.profile.initials}</NavLink></li>\n        </ul>\n    )\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signOut: () => dispatch(signOut())\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(SignedInLinks);","export const signIn = (credentials) => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signInWithEmailAndPassword(\n            credentials.email,\n            credentials.password\n        ).then(() => {\n            dispatch({ type: 'LOGIN_SUCCESS'})\n        }).catch((err) => {\n            dispatch({ type: 'LOGIN_ERROR', err });\n        })\n    }\n}\n\nexport const signOut = () => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n        \n        firebase.auth().signOut().then(() => {\n            dispatch({ type: 'SIGNOUT_SUCCESS '});\n        })\n    }\n}\n\nexport const signUp = (newUser) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        const firebase = getFirebase();\n        const firestore = getFirestore();\n\n        firebase.auth().createUserWithEmailAndPassword(\n            newUser.email,\n            newUser.password\n        ).then((resp) => {\n            return firestore.collection('users').doc(resp.user.uid).set({\n                firstName: newUser.firstName,\n                lastName: newUser.lastName,\n                initials: newUser.firstName[0] + newUser.lastName[0]\n            })\n        }).then(() => {\n            dispatch({ type: 'SIGNUP_SUCCESS' })\n        }).catch(err => {\n            dispatch({ type: 'SIGNUP_ERROR' }, err)\n        })\n    }\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst SignedOutLinks = () => {\n    return (\n        <ul className=\"right\">\n            <li><NavLink to=\"/signup\">Signup</NavLink></li>\n            <li><NavLink to=\"/signin\">Login</NavLink></li>\n        </ul>\n    )\n}\n\nexport default SignedOutLinks;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignedInLinks from './SignedInLinks';\nimport SignedOutLinks from './SignedOutLinks';\nimport { connect } from 'react-redux';\n\nconst Navbar = (props) => {\n    const { auth, profile } = props;\n    const links  = auth.uid ? <SignedInLinks profile={profile}/> : <SignedOutLinks />\n    return (\n        <nav className=\"nav-wrapper grey darken-3\">\n            <div className=\"container\">\n                <Link to=\"/\" className=\"brand-logo\">MarioPlan</Link>\n                { links }\n            </div>\n        </nav>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.firebase.auth,\n        profile: state.firebase.profile\n    }\n}\n\nexport default connect(mapStateToProps)(Navbar);","import React from 'react';\nimport moment from 'moment';\n\nconst Notifications = (props) => {\n    const {notifications} = props;\n    return (\n        <div className=\"section\">\n            <div className=\"card z-depth-0\">\n                <div className=\"card-content\">\n                    <span className=\"card-title\">Notifications</span>\n                    <ul className=\"notifications\">\n                        { notifications && notifications.map(item => {\n                            return (\n                                <li key={item.id}>\n                                    <span className=\"pink-text\">{item.user} </span>\n                                    <span>{item.content}</span>\n                                    <div className=\"grey-text note-date\">\n                                        {moment(item.time.toDate()).fromNow()}\n                                    </div>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Notifications;","import React from 'react';\nimport moment from 'moment';\n\nconst ProjectSummary = ({project}) => {\n    return (\n        <div className=\"card z-depth-0 project-summary\">\n            <div className=\"card-content grey-text text-darken-3\">\n                <span className=\"card-title\">{project.title}</span>\n                <p>Posted by {project.authorFirstName} {project.authorLastName}</p>\n                <p className=\"grey-text\">{moment(project.createdAt.toDate().toString()).calendar()}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default ProjectSummary;","import React from 'react';\nimport ProjectSummary from './ProjectSummary';\nimport { Link } from 'react-router-dom';\n\nconst ProjectList = ({projects}) => {\n    return (\n        <div className=\"project-list section\">\n            { projects && projects.map(project => {\n                return (\n                    <Link to={'/project/' + project.id} key={project.id}>\n                        <ProjectSummary project={project} />\n                    </Link>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ProjectList;","import React, { Component } from 'react';\nimport Notifications from './Notifications';\nimport ProjectList from '../projects/ProjectList';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport { Redirect } from 'react-router-dom';\n\nclass Dashboard extends Component {\n    render() {\n        const { projects, auth, notifications } = this.props;\n        if(!auth.uid) return <Redirect to=\"/signin\" />\n\n        return (\n            <div className=\"dashboard container\">\n                <div className=\"row\">\n                    <div className=\"col s12 m6\">\n                        <ProjectList projects={projects}/>\n                    </div>\n                    <div className=\"col s12 m5 offset-m1\">    \n                        <Notifications notifications={notifications}/>    \n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n\n    return {\n        projects: state.firestore.ordered.projects,\n        auth: state.firebase.auth,\n        notifications: state.firestore.ordered.notifications\n    }\n}\n\nexport default compose(\n    firestoreConnect(() => [\n        {collection: 'projects', orderBy: ['createdAt', 'desc']},\n        {collection: 'notifications', limit: 3, orderBy: ['time', 'desc']}\n    ]),\n    connect(mapStateToProps)\n)(Dashboard)\n// export default compose(\n//     connect(mapStateToProps),\n//     firestoreConnect([\n//         { collection: 'projects' }\n//     ])\n// )(Dashboard);","import React from 'react'\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport { Redirect } from 'react-router-dom';\nimport moment from 'moment';\n\nconst ProjectDetails = (props) => {\n    const { project, auth } = props;\n    if(!auth.uid) return <Redirect to=\"/signin\" />\n\n    if(project) {\n        return(\n            <div className=\"container section project-details\">\n            <div className=\"card z-depth-0\">\n                <div className=\"card-content\">\n                    <span className=\"card-title\">{ project.title }</span>\n                    <p>S{ project.content }</p>\n                </div>\n                <div className=\"card action grey lighten-4 grey-text\">\n                    <div>Posted by {project.authorFirstName} {project.authorLastName}</div>\n                    <div>{moment(project.createdAt.toDate().toString()).calendar()}</div>\n                </div>\n            </div>\n        </div>\n        )\n    }\n    else {\n        return (\n            <div className=\"container center\">\n                <p>Loading project...</p>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const id = ownProps.match.params.id\n    const projects = state.firestore.data.projects;\n    const project = projects ? projects[id] : null\n    return {\n        project: project,\n        auth: state.firebase.auth\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps),\n    firestoreConnect([\n        { collection: 'projects' }\n    ])\n)(ProjectDetails);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { signIn } from '../../store/actions/authActions';\nimport { Redirect } from 'react-router-dom';\n\nclass SignIn extends Component {\n    state = {\n        email: '',\n        password: ''\n    }\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.signIn(this.state);\n    }\n    render() {\n        const { authError, auth } = this.props\n        if(auth.uid) return <Redirect to=\"/\" />\n\n        return (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit} className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn pink ;lighten-1 z-depth-0\">Login</button>\n                        <div className=\"red-text center\">\n                            { authError ? <p>{authError}</p> : null }\n                        </div>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        authError: state.auth.authError,\n        auth: state.firebase.auth\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signIn: (creds) => dispatch(signIn(creds))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { signUp } from '../../store/actions/authActions';\n\nclass SignUp extends Component {\n    state = {\n        email: '',\n        password: '',\n        firstName: '',\n        lastName: ''\n    }\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.signUp(this.state)\n    }\n    render() {\n        const { auth, authError } = this.props\n        if(auth.uid) return <Redirect to=\"/\" />\n        return (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit} className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"firstName\">First Name</label>\n                        <input type=\"text\" id=\"firstName\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"lastName\">Email</label>\n                        <input type=\"text\" id=\"lastName\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn pink ;lighten-1 z-depth-0\">Sign Up</button>\n                        <div className=\"red-text center\">\n                            { authError ? <p>{ authError }</p> : null }\n                        </div>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.firebase.auth,\n        authError: state.auth.authError\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signUp: (newUser) => dispatch(signUp(newUser))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createProject } from '../../store/actions/projectActions';\nimport { Redirect } from 'react-router-dom';\n\nclass CreateProject extends Component {\n    state = {\n        title: '',\n        content: ''\n    }\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.createProject(this.state)\n        this.props.history.push('/');\n    }\n    render() {\n        const { auth } = this.props;\n        if(!auth.uid) return <Redirect to=\"/signin\" />\n        return (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit} className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Create New Project</h5>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"title\">Title</label>\n                        <input type=\"text\" id=\"title\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"content\">Project Content</label>\n                        <textarea id=\"content\" className=\"materialize-textarea\" onChange={this.handleChange}></textarea>\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn pink ;lighten-1 z-depth-0\">Create Project</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.firebase.auth\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        createProject: (project) => dispatch(createProject(project))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject);\n","export const createProject = (project) => {\n    return (dispatch, getState, {getFirestore}) => {\n        // make async call to database\n        const database = getFirestore();\n        const profile = getState().firebase.profile;\n        const authorId = getState().firebase.auth.uid\n        database.collection('projects').add({\n            ...project, //spread operator. spreads the object and neatly pushes it as desired category collections with the information already added. whatever is added after is added to the object\n            authorFirstName: profile.firstName,\n            authorLastName: profile.lastName,\n            authorId: authorId,\n            createdAt: new Date()\n        }).then(() => { //once object is pushed into database then do whatever is inside .then func.\n            dispatch({ type: 'CREATE_PROJECT', project: project });\n        }).catch((err) => {\n            dispatch({ type: 'CREATE_PROJECT_ERROR', err});\n        })\n    }\n}","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Dashboard from './components/dashboard/Dashboard';\nimport ProjectDetails from './components/projects/ProjectDetails';\nimport SignIn from './components/auth/SignIn';\nimport SignUp from './components/auth/SignUp';\nimport CreateProject from './components/projects/CreateProject';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Dashboard} />\n          <Route path=\"/project/:id\" component={ProjectDetails} />\n          <Route path=\"/signin\" component={SignIn} />\n          <Route path=\"/signup\" component={SignUp} />\n          <Route path=\"/create\" component={CreateProject} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n    authError: null\n};\n\nconst authReducer = (state = initState, action) => {\n    switch(action.type) {\n        case 'LOGIN_ERROR':\n            return {\n                ...state,\n                authError: 'Login failed'\n            }\n        case 'LOGIN_SUCCESS':\n            return {\n                ...state,\n                authError: null\n            }\n        case 'SIGNOUT_SUCCESS':\n            return state;\n        case 'SIGNUP_SUCCESS':\n            return {\n                ...state,\n                authError: null\n            }\n        case 'SIGNUP_ERROR':\n            return {\n                ...state,\n                authError: action.err\n            }\n        default:\n            return state;\n    }\n}\n\nexport default authReducer;","const initState = {\n};\n\nconst projectReducer = (state = initState, action) => {\n    switch(action.type) {\n        case 'CREATE_PROJECT':\n            return state;\n        case 'CREATE_PROJECT_ERROR':\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default projectReducer;","import authReducer from './authReducer';\nimport projectReducer from './projectReducer';\nimport { combineReducers } from 'redux';\nimport { firestoreReducer } from 'redux-firestore';\nimport { firebaseReducer } from 'react-redux-firebase';\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    project: projectReducer,\n    firestore: firestoreReducer,\n    firebase: firebaseReducer\n});\n\nexport default rootReducer;","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyCctKDj2OgyhwBDm8y5DvjYxvz0E6HLwT8\",\n    authDomain: \"mario-plan-1a6f8.firebaseapp.com\",\n    databaseURL: \"https://mario-plan-1a6f8.firebaseio.com\",\n    projectId: \"mario-plan-1a6f8\",\n    storageBucket: \"mario-plan-1a6f8.appspot.com\",\n    messagingSenderId: \"491905953126\",\n    appId: \"1:491905953126:web:d4568dba06cc7e8628aca7\",\n    measurementId: \"G-0EP285ZV3Q\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.firestore().settings({ timestampsInSnapshots: true });\n\nexport default firebase ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./store/reducers/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport {\n  createFirestoreInstance,\n  getFirestore,\n  reduxFirestore\n} from \"redux-firestore\";\nimport { ReactReduxFirebaseProvider, getFirebase } from \"react-redux-firebase\";\nimport fbConfig from \"./config/fbConfig\";\nimport firebase from \"firebase/app\";\n\n//for render on auth ready\nimport { useSelector  } from 'react-redux'\nimport { isLoaded  } from 'react-redux-firebase';\n\n\n\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk.withExtraArgument({ getFirestore, getFirebase })),\n    reduxFirestore(firebase, fbConfig)\n  )\n);\n\nconst profileSpecificProps = {\n  userProfile: 'users',\n  useFirestoreForProfile: true,\n  enableRedirectHandling: false,\n  resetBeforeLogin: false\n}\n\n\nconst rrfProps = {\n  firebase,\n  config: fbConfig,\n  config: profileSpecificProps,\n  dispatch: store.dispatch,\n  createFirestoreInstance\n};\n\nfunction AuthIsLoaded({ children }) {\n  const auth = useSelector(state => state.firebase.auth)\n  if (!isLoaded(auth)) return <div className=\"center\"> <p>Loading Mario Plan...</p></div>;\n      return children\n}\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <AuthIsLoaded>\n      <App />\n      </AuthIsLoaded>\n      \n    </ReactReduxFirebaseProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}